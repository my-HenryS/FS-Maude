--- file:     generic.maude
--- requires: prelude
--- comment:  This module contains generic structures depending on the prelude.

fmod LIST-EXTRA{X :: TRIV} is
  pr NAT .
  ex LIST{X} *
	  (sort List{X} to ListX{X},
	   sort NeList{X} to NeListX{X}) .
  op rest : ListX{X} -> ListX{X} .
  op pick : Nat ListX{X} -> X$Elt .

  var I I' : X$Elt .
  var L : ListX{X} .
  var N : Nat .

  eq rest(I L) = L .
  eq rest(nil) = nil .
  eq pick(s(N),I L) = pick(N,L) .
  eq pick(0,I L) = I .
endfm

fmod MAP-EXTRA{X :: TRIV, Y :: TRIV} is
	pr MAP{X,Y} *
	  (sort Map{X,Y} to MapX{X,Y},
		 sort Entry{X,Y} to EntryX{X,Y}) .
	pr NAT .

  op remove : X$Elt MapX{X,Y} -> MapX{X,Y} .
	op size   : MapX{X,Y} -> Nat .
	op $size  : MapX{X,Y} Nat -> Nat .

	var M : MapX{X,Y} .
	var E : EntryX{X,Y} .
  var K : X$Elt .
  var V : Y$Elt .
	var N : Nat .

	eq size(M) = $size(M,0) .
	eq $size((M , E), N) = $size(M,s(N)) .
	eq $size(empty,N) = N .
  eq remove(K, (M, K |-> V)) = M .
  eq remove(K, M) = M [owise] .
endfm

fmod TUPLE2{X :: TRIV, Y :: TRIV} is
	sort Tuple2 .
	op ((_,_)) : X$Elt Y$Elt -> Tuple2 .
	op p1 : Tuple2 -> X$Elt .
	op p2 : Tuple2 -> Y$Elt .
	var X : X$Elt .
	var Y : Y$Elt .
	eq p1((X,Y)) = X .
	eq p2((X,Y)) = Y .
endfm

fmod TUPLE3{X :: TRIV, Y :: TRIV, Z :: TRIV} is
	sort Tuple3 .
	op ((_,_,_)) : X$Elt Y$Elt Z$Elt -> Tuple3 .
	op p1 : Tuple3 -> X$Elt .
	op p2 : Tuple3 -> Y$Elt .
	op p3 : Tuple3 -> Z$Elt .
	var X : X$Elt .
	var Y : Y$Elt .
	var Z : Z$Elt .
	eq p1((X,Y,Z)) = X .
	eq p2((X,Y,Z)) = Y .
	eq p3((X,Y,Z)) = Z .
endfm

fmod TUPLE4{X :: TRIV, Y :: TRIV, Z :: TRIV, W :: TRIV} is
	sort Tuple4 .
	op ((_,_,_,_)) : X$Elt Y$Elt Z$Elt W$Elt -> Tuple4 .
	op p1 : Tuple4 -> X$Elt .
	op p2 : Tuple4 -> Y$Elt .
	op p3 : Tuple4 -> Z$Elt .
	op p4 : Tuple4 -> W$Elt .
	var X : X$Elt .
	var Y : Y$Elt .
	var Z : Z$Elt .
	var W : W$Elt .
	eq p1((X,Y,Z,W)) = X .
	eq p2((X,Y,Z,W)) = Y .
	eq p3((X,Y,Z,W)) = Z .
	eq p4((X,Y,Z,W)) = W .
endfm

mod SAMPLER is
  pr RANDOM .
  pr COUNTER .
  pr CONVERSION .

  op sampleBerWithP : Float -> [Bool] .
  op sampleUniWithInt : Nat -> [Nat] .
  op genRandom : Float Float -> [Float] .
  op sampleExp : Float -> [Float] .
  var n s : Nat .

  op rand : -> [Float] .
  rl [rnd] : rand => float(random(counter) / 4294967296) .

  op rrand : -> [Rat] .
  rl [rrnd] : rrand => random(counter) / 4294967296 .

  var R R1 Min Max : Float .

  eq sampleBerWithP(R) = if rand < R then true else false fi .
  eq sampleUniWithInt(n) = floor(rrand * n) .
  eq genRandom(Min, Max) = rand * (Max - Min) + Min .
  eq sampleExp(R) = (- log(rand)) / R . 
endm

  mod CLOCK is  
    pr SAMPLER .  
    sort Clock .  
    op clock : Nat Float -> Clock [ctor] .  
    op broken : Nat Float -> Clock [ctor] .  
    var T : Nat .  
    var C : Float .  
    rl clock(T,C)  
      => if sampleBerWithP(C / 1000.0)  
         then clock(s(T), C - (C / 1000.0))  
         else broken(T, C)  
         fi .  
  endm 


---rewrite in CLOCK : clock(0, 1.0e+3) . 

