set show advisories off .

set show advisories off .
load server
load storage
load main

--- raw-read(0, 10, (4,0 |-> 0), (0 |-> "1234567890")) .
--- red in FS-DISK : raw-read(0, 11, (4,0 |-> 0), (0 |-> "1234567890")) .
--- red in FS-DISK : raw-write("1234", 0, 4, (4,0 |-> 0), empty) .
--- red in FS-DISK : raw-read(4, 11, (16,0 |-> 0 ; 1 |-> 1), (0 |-> "12345678" ; 1 |-> "12345678")) .
---red in FS-DISK : $raw-write("1234567891", 1, 7, (4,0 |-> 0 ; 1 |-> 1), empty) .
--- red in FS-DISK : raw-write("1234567891", 1, 10, (4,0 |-> 0 ; 1 |-> 1), empty) .
--- red in FS-DISK : raw-write("1234567891", 1, 10, (4,0 |-> 0 ; 1 |-> 1), (0 |-> "12345678" ; 1 |-> "12345678")) .
--- red insert("one", 0, insert("two", 2, insert("three", 3, empty))) .
---red in FS-DISK : $raw-read(0, 7, (4,0 |-> 0), (0 |-> "1234567890")) .
--- red update-inode-pointer((2 @ 3), 0, (0 |-> (4,0 |-> 0 ; 1 |-> 1))) .
--- red update-inode-size(8, 0, (0 |-> (4,0 |-> 0 ; 1 |-> 1))) .
--- red update-inode(8, (2 @ 3), 1, (0 |-> (4,0 |-> 0 ; 1 |-> 1))) .


    --- crl [auto-persist] :
    ---     < A1 : FS-CACHE | AS > 
    ---     < A2 : FS-DISK | AS2 >
    ---     ---< A3 : SysClock | time : T, tick : TI >
    ---     {T, A3 <- tick-tock}
    ---     =>
    ---     < A1 : FS-CACHE | AS > 
    ---     < A2 : FS-DISK | AS2 >
    ---     [0.0, A2 <- persist-db(A1)]
    ---     if T rem 3.0 == 0.0 .

--- ---load storage
--- load term-order


--- mod CASSANDRA-SERVER-CLIENT is
---     pr NAT .
---     ---pr LIST{NzNat} * (op __ to (_@_)) .
---     pr META-VIEW .
---     pr NAT-LIST 
---      * (sort NatList to h, op __ to (_@_)) .
--- endm

--- red append(2, append(1, nil)) .
--- q
--- fmod INT-LIST is 
---     pr NAT .
---     pr INT .
---     pr STRING .
---     pr CONVERSION .

---     op cool : Nat Nat -> String .
---     vars A B : Nat .

---     eq cool(A,B) = string((B - A rem B), 10) .
--- endfm

--- mod RABBIT-HOP is
--- protecting NAT .
--- protecting INT .
--- sorts Rabbit RabbitList . 
--- subsort Rabbit < RabbitList .
--- ops x o free : -> Rabbit .
--- op __ : RabbitList RabbitList -> RabbitList [assoc] . 
--- op initial : Nat -> RabbitList .
--- var N : Nat .
--- vars L R : RabbitList .
--- var B : Rabbit .
--- eq initial(0) = free .
--- eq initial(s(N)) = x initial(N) o .
--- rl [xAdvances] : x free => free x . 
--- rl [xJumps] : x o free => free o x . 
--- rl [oAdvances] : free o => o free .
--- rl [oJumps] : free x o => o x free .
--- endm


--- mod RABBIT is
--- protecting INT .
--- sort Rabbitlist .
--- ops x o free : -> Rabbitlist .
--- op __ : Rabbitlist Rabbitlist -> Rabbitlist [assoc] .
--- op initial : Int -> Rabbitlist .
--- var N : Int .

--- eq initial(0) = free .
--- eq initial(N) = x initial(N - 1) o .

--- rl [xAdvances] : x free => free x .
--- rl [xJumps] : x o free => free o x .
--- rl [oAdvances] : o free => free o .
--- rl [oJumps] : free x o => o x free .
--- endm
